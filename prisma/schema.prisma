generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  email       String        @unique @db.VarChar(255)
  address     String?       @db.VarChar(255)
  city        String?       @db.VarChar(255)
  zip         String?       @db.Char(5)
  phoneNumber String?       @map("phone_number") @db.Char(11)
  mediaUpload MediaUpload[]
  report      Report[]
  session     Session[]
  account     Account[]
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerifcationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Location {
  id        Int      @id @default(autoincrement())
  latitude  Decimal  @db.Decimal(10, 6)
  longitude Decimal  @db.Decimal(10, 6)
  report    Report[]

  @@unique([latitude, longitude])
}

model Report {
  id           Int            @id @default(autoincrement())
  published    Boolean        @default(false)
  userId       Int?           @map("user_id")
  locationId   Int?           @map("location_id")
  location     Location?      @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_location_report_id")
  user         User?          @relation(fields: [userId], references: [id], onUpdate: NoAction, map: "fk_user_report_id")
  fieldReports FieldReports[]
}

model Field {
  id           Int            @id @default(autoincrement())
  type         String         @db.VarChar(255)
  value        Json?          @db.Json
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @updatedAt @db.Timestamp(6)
  fieldReports FieldReports[]
  mediaUpload  MediaUpload[]
}

model FieldReports {
  report_id Int
  field_id  Int
  field     Field  @relation(fields: [field_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_field")
  report    Report @relation(fields: [report_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_report")

  @@id([report_id, field_id])
}

model MediaUpload {
  id          Int      @id @default(autoincrement())
  name        String   @db.VarChar(255)
  size        Int?     @default(0)
  type        String?  @db.VarChar(255)
  uri         String   @db.VarChar(255)
  description String?
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @updatedAt @db.Timestamp(6)
  fieldId     Int?     @map("field_id")
  userId      Int      @map("user_id")
  field       Field?   @relation(fields: [fieldId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mediaupload_field_id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_mediaupload_user_id")
}
